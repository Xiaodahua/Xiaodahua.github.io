{"meta":{"title":"Xiaodahua","subtitle":"the stack of it nerds","description":"start from zero","author":"Xiaodahua","url":"http://Xiaodahua.com"},"pages":[{"title":"关于","date":"2017-03-20T12:57:33.000Z","updated":"2017-12-12T07:03:03.307Z","comments":true,"path":"about/index.html","permalink":"http://Xiaodahua.com/about/index.html","excerpt":"","text":"脚踏实地的考虑三个问题：能做的，想做的，正在做的。"},{"title":"tags","date":"2017-11-30T07:30:51.000Z","updated":"2017-11-30T07:30:51.484Z","comments":true,"path":"tags/index.html","permalink":"http://Xiaodahua.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Ajax跨域","slug":"12.7","date":"2017-12-07T10:21:25.159Z","updated":"2017-12-13T02:24:02.940Z","comments":true,"path":"2017/12/07/12.7/","link":"","permalink":"http://Xiaodahua.com/2017/12/07/12.7/","excerpt":"","text":"由于浏览器实现的同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，所以AJAX是不允许跨域的。这里提供自己常用的三种方法： 1、jsonp访问 JSONP(JSON with Padding)是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问； 实现方式 1). 2). 2、damain 方法在主域相同，子域不同的情况下可以用这种方法，修改域名指向，让他们指向同一域名，这种办法也只能解决主域相同而二级域名不同的情况，两个毫无关系的网址是不可以用这种方法的； 注：在实际开发中，很多人会在本地调试接口，localhost的域名和公司的域名完全不一样，所有用了domain这种办法也无法产生效果，解决办法是修改c盘里的host文件，把本地地址localhost修改成公司域名或者公司二级域名，然后这种方法就可以使用了。 下面是修改的域名指向： #127.0.0.1 localhost 127.0.0.1 公司.com 3、postMessage postMessage是h5的一个新功能之一，方便数据提交等。 这里假设，iframe的Id为 ‘iframe’； 在ifame外面的js里面要写上 4.CORS如果浏览器支持HTML5，那么就可以一劳永逸地使用新的跨域策略：CORS了。 CORS全称Cross-Origin Resource Sharing，是HTML5规范定义的如何跨域访问资源。 了解CORS前，我们先搞明白概念： Origin表示本域，也就是浏览器当前页面的域。当JavaScript向外域（如sina.com）发起请求后，浏览器收到响应后，首先检查Access-Control-Allow-Origin是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript将无法获取到响应的任何数据。假设本域是my.com，外域是sina.com，只要响应头Access-Control-Allow-Origin为http://my.com，或者是*，本次请求就可以成功。 可见，跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的Access-Control-Allow-Origin，决定权始终在对方手中。 上面这种跨域请求，称之为“简单请求”。简单请求包括GET、HEAD和POST（POST的Content-Type类型仅限application/x-www-form-urlencoded、multipart/form-data和text/plain），并且不能出现任何自定义头（例如，X-Custom: 12345），通常能满足90%的需求。 无论你是否需要用JavaScript通过CORS跨域请求资源，你都要了解CORS的原理。最新的浏览器全面支持HTML5。在引用外域资源时，除了JavaScript和CSS外，都要验证CORS。","categories":[],"tags":[]},{"title":"Axios-源码分析","slug":"a new one","date":"2017-11-30T02:52:27.000Z","updated":"2017-12-12T08:25:29.712Z","comments":true,"path":"2017/11/30/a new one/","link":"","permalink":"http://Xiaodahua.com/2017/11/30/a new one/","excerpt":"","text":"Axios 可以说是当前 Github 上最受关注的 HTTP 库，目前已经有超过 25k 的 star 数。作为 vue.js 官方推荐的 HTTP 库，必然有着过人之处。 Axios 的主要特性包括： 基于 Promise支持浏览器和 node.js可添加拦截器和转换请求和响应数据请求可以取消自动转换 JSON 数据客户端支持防范 XSRF支持各主流浏览器及 IE8+对比于 fetch，除了同样支持 Promise API 外，aixos 的确拥有更加丰富的功能，而这次的源码分析也主要是针对‘拦截器’和‘请求取消’。","categories":[],"tags":[]},{"title":"AJAX","slug":"文章标题","date":"2017-11-30T02:52:27.000Z","updated":"2017-12-13T02:27:21.671Z","comments":true,"path":"2017/11/30/文章标题/","link":"","permalink":"http://Xiaodahua.com/2017/11/30/文章标题/","excerpt":"","text":"1.AJAXAJAX不是JavaScript的规范，它只是一个哥们“发明”的缩写：Asynchronous JavaScript and XML，意思就是用JavaScript执行异步网络请求。如果仔细观察一个Form的提交，你就会发现，一旦用户点击“Submit”按钮，表单开始提交，浏览器就会刷新页面，然后在新页面里告诉你操作是成功了还是失败了。如果不幸由于网络太慢或者其他原因，就会得到一个404页面。 这就是Web的运作原理：一次HTTP请求对应一个页面。 如果要让用户留在当前页面中，同时发出新的HTTP请求，就必须用JavaScript发送这个新请求，接收到数据后，再用JavaScript更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。 最早大规模使用AJAX的就是Gmail，Gmail的页面在首次加载后，剩下的所有数据都依赖于AJAX来更新。 用JavaScript写一个完整的AJAX代码并不复杂，但是需要注意：AJAX请求是异步执行的，也就是说，要通过回调函数获得响应。 在现代浏览器上写AJAX主要依靠XMLHttpRequest对象： 2.安全限制上面代码的URL使用的是相对路径。如果你把它改为’http://www.sina.com.cn/&#39;，再运行，肯定报错。在Chrome的控制台里，还可以看到错误信息。 这是因为浏览器的同源策略导致的。默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。 完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。 那是不是用JavaScript无法请求外域（就是其他网站）的URL了呢？方法还是有的，大概有这么几种： 一是通过Flash插件发送HTTP请求，这种方式可以绕过浏览器的安全限制，但必须安装Flash，并且跟Flash交互。不过Flash用起来麻烦，而且现在用得也越来越少了。 二是通过在同源域名下架设一个代理服务器来转发，JavaScript负责把请求发送到代理服务器：代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。 第三种方式称为JSONP，它有个限制，只能用GET请求，并且要求返回JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用JavaScript资源：JSONP通常以函数调用的形式返回，例如，返回JavaScript内容如下： 这样一来，我们如果在页面中先准备好foo()函数，然后给页面动态加一个节点，相当于动态读取外域的JavaScript资源，最后就等着接收回调了。","categories":[],"tags":[]}]}